<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>Rotation Class</title><meta name="Title" content="Rotation" /><meta name="Help.Id" content="T:Machina.Types.Geometry.Rotation" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="Machina.Types.Geometry" /><meta name="guid" content="8cc5d6fe-426b-72ab-c6e9-dc05987ca9ad" /><meta name="Description" content="Represents a rotation in three-dimensional space. This rotation is usually defined by its rotation axis and angles, although other definition inputs are possible, such as Quaternions, Rotation Matrices or Euler Angles (Yaw-Pitch-Roll)." /><meta name="tocFile" content="../toc/IDI.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">A Sandcastle Documented Class Library</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Rotation Class</h1><div class="summary">
            Represents a rotation in three-dimensional space.
            This rotation is usually defined by its rotation axis and angles, although other
            definition inputs are possible, such as Quaternions, Rotation Matrices or
            Euler Angles (Yaw-Pitch-Roll).
            </div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="74cdaf10-aea3-c3c4-27fe-7db6c7a360b6.htm">Machina.Types.Geometry</a><br /><strong>Assembly:</strong> Machina (in Machina.dll) Version: 0.0.0.0<div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">Rotation</span> : <span class="identifier">Geometry</span></code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <a href="026a4b5c-74ee-7c65-0a2d-e1632f183d50.htm">Geometry</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">Rotation</span></dd></dl></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Constructors</h2><div id="IDACEASection"><table id="ConstructorList" class="table is-hoverable"><tr><td><a href="81e7ad4f-999e-da80-437c-b50c7f4037a5.htm">Rotation<span id="LST89DCA4D3_0" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            Create an empty rotation object with no initialized fields.
            </td></tr><tr><td><a href="0d388aeb-ccc1-f4b4-c220-35d23e1a10e8.htm">Rotation(Quaternion)</a></td><td>
            Internal constructor from a normalized Quaternion object.
            </td></tr><tr><td><a href="915b9c53-9475-e760-b0e5-fa2c7b7f997c.htm">Rotation(Rotation)</a></td><td>
            Create a Rotation as a shallow copy of another one. 
            </td></tr><tr><td><a href="54d16d5b-293d-2a40-2053-11cefcef3ac9.htm">Rotation(Vector, Double)</a></td><td>
            Create a rotation of 'angle' degrees around the 'axis' vector.
            </td></tr><tr><td><a href="a1af1252-ce12-ce8a-eb74-b747aabe3001.htm">Rotation(Double, Double, Double, Double)</a></td><td>
            Creates a rotation around a vector axis with XYZ components with the angle
            defined in degrees and right-hand rule. The axis will be automatically
            normalized. 
            </td></tr><tr><td><a href="ca297202-d8bd-75bb-182b-0ed84322ac38.htm">Rotation(Double, Double, Double, Double, Boolean)</a></td><td>
            Main internal constructor.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Properties</h2><div id="IDXEASection"><table id="PropertyList" class="table is-hoverable"><tr><td><a href="0014bd8d-0a5d-51d2-27c4-d2afceeabb0f.htm">Angle</a></td><td>
            The rotation angle in degrees. 
            </td></tr><tr><td><a href="24161fec-1b96-50b2-e12d-51d34345a014.htm">Axis</a></td><td>
            The axis vector around which this rotation revolves.
            </td></tr><tr><td><a href="aff28600-d9ad-149e-9289-19835fae0a25.htm">FlippedAroundX</a></td><td>
            A Rotation of 180 degs around the X axis.
            </td></tr><tr><td><a href="0fb05793-a82f-6a04-03d7-c5a78a17640e.htm">FlippedAroundY</a></td><td>
            A Rotation of 180 degs around the Y axis. 
            This is the most common orientation of the coordiante system of the flange of a robot in 'home' position.
            </td></tr><tr><td><a href="2fdaf422-7dd5-c878-e82c-9da5804e9bd3.htm">FlippedAroundZ</a></td><td>
            A Rotation of 180 degs around the Z axis. 
            </td></tr><tr><td><a href="f7d6d443-9e62-2f9b-cef8-322df2f6b8bd.htm">GlobalXYZ</a></td><td>
            An empty Rotation representing the orientation of the global XYZ coordinate system.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Methods</h2><div id="IDDEASection"><table id="MethodList" class="table is-hoverable"><tr><td><a href="a723a298-df4c-605d-14c1-02c371d576a7.htm">Combine</a></td><td>
            Combine the effect of two Rotations. 
            Please note that rotations will be applied in the order specified by the arguments
            in intrinsic coordinates (post-multiply), i.e. r1, then r2 over the new LOCAL transformed coordinate system.
            This means that, if you want to rotate a Rotation A with another Rotation B in GLOBAL coordinates, 
            you will need to pre-multiply the rotations as in: Combine(B, A).
            </td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)" target="_blank" rel="noopener noreferrer">Equals</a></td><td>Determines whether the specified object is equal to the current object.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.finalize" target="_blank" rel="noopener noreferrer">Finalize</a></td><td>Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="986b270c-4d2b-222d-3f22-4632de6149a5.htm">FromQuaternion</a></td><td>
            Create a Rotation from its Quaternion values. 
            This is a static method because it 
            </td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gethashcode" target="_blank" rel="noopener noreferrer">GetHashCode</a></td><td>Serves as the default hash function.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="6e49de41-cba4-9f1b-0afb-d128d7638954.htm">GetRotationVector<span id="LST89DCA4D3_1" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            Return a RotationVector representation of this Rotation.
            </td></tr><tr><td><a href="880e5f26-f331-b0c6-028f-c38390a2e4c8.htm">GetRotationVector(Boolean)</a></td><td>
            Return a RotationVector representation of this Rotation.
            </td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gettype" target="_blank" rel="noopener noreferrer">GetType</a></td><td>Gets the <a href="https://learn.microsoft.com/dotnet/api/system.type" target="_blank" rel="noopener noreferrer">Type</a> of the current instance.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="b690e6e3-b32b-ee60-3b63-1a334ec12142.htm">Global</a></td><td>
            Rotate r1 over r2 in GLOBAL coordinates. 
            This is an alias for Rotation.Combine(r2, r1), see Rotation.Combine() for more details.
            @TODO: optimize, can probably do this with a direct Quaternion pre-multiplication.
            </td></tr><tr><td><a href="fdf2e29c-13f3-a0a4-a20c-8bc7422ab74d.htm">Inverse</a></td><td>
            Return a rotation around the same axis but negative angle.
            </td></tr><tr><td><a href="8d12d53e-8e9f-ebef-252a-5ccb647e9fd9.htm">Invert</a></td><td>
            Invert this rotation to negative angle around the same axis.
            </td></tr><tr><td><a href="5fd31ec5-46be-c2a1-d55c-1494b43167bb.htm">Local</a></td><td>
            Rotate r1 with r2 in LOCAL coordinates. 
            This is an alias for Rotation.Combine(r1, r2), see Rotation.Combine() for more details.
            @TODO: optimize, can probably do this with a direct Quaternion post-multiplication.
            </td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone" target="_blank" rel="noopener noreferrer">MemberwiseClone</a></td><td>Creates a shallow copy of the current <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="1c79792a-89ea-02ed-28e2-0a1d3902d782.htm">RotateGlobal</a></td><td>
            Rotate this rotation using Global (extrinsic) coordinate system. 
            Internally, this rotation is pre-multiplied by the given one. 
            </td></tr><tr><td><a href="3882d2b2-af40-a410-efb6-5d4fab08653a.htm">RotateLocal</a></td><td>
            Rotate this rotation using Local (intrinsic) coordinate system. 
            Internally, this rotation is post-multiplied by the given one. 
            </td></tr><tr><td><a href="79b57901-1d22-0ee0-30ec-c0f2b01de473.htm">ToArrayString</a></td><td> </td></tr><tr><td><a href="c6457194-e634-1068-b85c-035455a2f039.htm">ToOrientation</a></td><td>
            Returns an Orientation representation of this Rotation. 
            </td></tr><tr><td><a href="f150edb7-bfe9-1d80-6224-26bb960f6831.htm">ToString<span id="LST89DCA4D3_2" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td><br />(Overrides <a href="https://learn.microsoft.com/dotnet/api/system.object.tostring" target="_blank" rel="noopener noreferrer">Object<span id="LST89DCA4D3_3" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>ToString<span id="LST89DCA4D3_4" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>)</td></tr><tr><td><a href="5a561999-e44f-bf73-d7bd-c524cf1bb104.htm">ToString(Boolean)</a></td><td> </td></tr><tr><td><a href="b6970c4f-9f4d-3cce-01ec-a442b1f15f7c.htm">UpdateAxisAngle</a></td><td> </td></tr><tr><td><a href="ab7b0e0b-3a81-cd29-d001-e980da4cada8.htm">UpdateQuaternion</a></td><td>
            Update the Quaternion from the AxisAngle value.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Operators</h2><div id="IDKEASection"><table id="OperatorList" class="table is-hoverable"><tr><td><a href="068d76ca-5630-0324-823c-a54ed6118581.htm"><span id="LST89DCA4D3_5" data-languageSpecificText="cs=Implicit|vb=Widening|cpp=Implicit|nu=Implicit|fs=Implicit"></span>(Orientation to Rotation)</a></td><td>
            Implicit conversion from Orientation to Rotation via its Quaternion.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Fields</h2><div id="IDAEASection"><table id="FieldList" class="table is-hoverable"><tr><td><a href="b5f2ed98-3249-0e5e-754e-d7cf7903e6ba.htm">AA</a></td><td>
            Internal AxisAngle representation of this rotation. Used as high-level representation.
            </td></tr><tr><td><a href="876c4822-9196-f8f3-c63a-9ceb48fa9bb5.htm">Q</a></td><td>
            Internal Quaternion representation of this rotation. Used for computations.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="74cdaf10-aea3-c3c4-27fe-7db6c7a360b6.htm">Machina.Types.Geometry Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a></li><li><a class="quickLink">Constructors</a></li><li><a class="quickLink">Properties</a></li><li><a class="quickLink">Methods</a></li><li><a class="quickLink">Operators</a></li><li><a class="quickLink">Fields</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>